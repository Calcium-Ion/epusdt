version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "7567:8080"
    volumes:
      - ./src/static:/static
      - ./runtime/logs:/runtime/logs
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
      - APP_DEBUG=false
      - LOG_SAVE_PATH=/logs
      - MYSQL_USER=${MYSQL_USER:-epusdt}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_HOST=mysql
      - MYSQL_DATABASE=${MYSQL_DATABASE:-epusdt}
      - MYSQL_MAX_IDLE_CONNS=${MYSQL_MAX_IDLE_CONNS:-10}
      - MYSQL_MAX_OPEN_CONNS=${MYSQL_MAX_OPEN_CONNS:-100}
      - MYSQL_MAX_LIFE_TIME=${MYSQL_MAX_LIFE_TIME:-3600}
      - MYSQL_TABLE_PREFIX=${MYSQL_TABLE_PREFIX:-epusdt_}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE:-10}
      - REDIS_MAX_RETRIES=${REDIS_MAX_RETRIES:-3}
      - REDIS_IDLE_TIMEOUT=${REDIS_IDLE_TIMEOUT:-300}
      - TG_BOT_TOKEN=${TG_BOT_TOKEN}
      - TG_PROXY=${TG_PROXY}
      - TG_MANAGE=${TG_MANAGE}
      - HTTP_LISTEN=${HTTP_LISTEN:-:8080}
      - QUEUE_CONCURRENCY=${QUEUE_CONCURRENCY:-10}
      - QUEUE_LEVEL_CRITICAL=${QUEUE_LEVEL_CRITICAL:-6}
      - QUEUE_LEVEL_DEFAULT=${QUEUE_LEVEL_DEFAULT:-3}
      - QUEUE_LEVEL_LOW=${QUEUE_LEVEL_LOW:-1}
      - APP_URI=${APP_URI}
      - API_AUTH_TOKEN=${API_AUTH_TOKEN}

  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-epusdt}
      - MYSQL_USER=${MYSQL_USER:-epusdt}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=Asia/Shanghai
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
  redis_data: 